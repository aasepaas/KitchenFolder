
###pickup script 
#endOTabelCoords = posx([1068.4,6.5,442.2,179.5,-144.35,-144.72])
#endOTabelCoordsLowered = posx([996.30,-214.3,89.4,122.0,-178.5,169.2])
#LinearAxisCoords = posx([994.6,-266.3,58.2,21.6,174.8,70.4])
#LinearAxisUp = posx([994.6,-266.3,490.2,21.6,174.8,70.4])
#MiddleOfTableCoords = posx([678.5,-103.4,112.87,162.5,176.12,-153.7])
#wait(2)
#set_digital_output(2, OFF)
#set_digital_output(5, OFF) #Venturi
#wait(1)
#test = posx([892.5,73.9,29.9,18.68,172.6,-77.1])
#set_digital_output(2, ON)
#movejx(test,vel=25,acc=200,sol=3) 
#set_digital_output(5, ON) #Venturi  
#test = posx([892.5,73.9,60.9,18.68,172.6,-77.1])
#movejx(test,vel=25,acc=200,sol=3) 
#set_digital_output(2, OFF)
#set_digital_output(5, OFF) #Venturi
#
#movejx(endOTabelCoords,vel=25,acc=200,sol=3) 
#
#movejx(endOTabelCoordsLowered,vel=25,acc=200,sol=3)
#movejx(LinearAxisCoords,vel=25,acc=200,sol=3)
#set_digital_output(4, ON) #Venturi
#movejx(LinearAxisUp,vel=25,acc=200,sol=3)
#movejx(MiddleOfTableCoords,vel=25,acc=200,sol=3)
#





  



###minicscript 2, pickup is done, rest of the movement


#movejx(checkTest,vel=25,acc=200,sol=3) 

#wait(5)
##set_digital_output(1, ON) #Second arm cilinder, on is ready to grip
##set_digital_output(2, ON) #robot arm gripper #ON is open to suck 
##set_digital_output(3, OFF) #Towel blower off towel 
##set_digital_output(4, OFF) #Second arm gripper #off ready to gri
##set_digital_output(5, ON) #Venturi 
##
##EndCoords = posx([561.6,230.45,100.09,131.5,178.12, -96.7])
##movejx(EndCoords,vel=150,acc=500,sol=2, radius = 10)
##
##
##endOTabelCoords = posx([1106.4,-63.7,372.60,171.9,-128.59, -164.42])
##movejx(endOTabelCoords,vel=150,acc=500,sol=2, radius = 10)
##
##endOTabelCoordsLowered = posx([1002.33, 48.67,49.31,2.26,174.24,42.87])
##movejx(endOTabelCoordsLowered,vel=100,acc=200,sol=2)
##wait(0.2)
##
##LinearAxisCoords = posx([997.01,104.15,50.7,172.28,-170.45,-141.12])
##movejx(LinearAxisCoords,vel=25,acc=200,sol=2)
##
##set_digital_output(4, ON) #Second arm gripper #off ready to gri
##wait(0.2)
##LinearAxisUp = posx([976.13,100.2,441.48,174.29,-161.52, -142.01])
##movejx(LinearAxisUp,vel=15,acc=150,sol=2, radius = 10)
##wait(10)
##MiddleOfTableCoords = posx([710.5,-147.4,138.87,44.5,-176.12, 78.7])
##Straight2gripperhold = posx([1014.8,-270.17,52.88,102.45,-176.02, 157.11])
##movejx(Straight2gripperhold,vel=100,acc=400,sol=2, radius = 10)
##
##set_digital_output(1, OFF) #Second arm cilinder, on is ready to grip
##
##EndCoords = posx([561.6,230.45,40.09,131.5,178.12, -96.7])
##
##startpos = posx([572.51, -542.23, 100, 144.86, 177.23, -60.4])
##movejx(startpos,vel=25,acc=200,sol=2)
##wait(10)
##
##EndCoords = posx([513, -731, 25, 92, -172, -117])
##movejx(EndCoords,vel=25,acc=200,sol=2)
##wait(10)

##########!!!!!!!!!!!!TEST CODE CORRECT################!!!!!!!!!!!!!!1
#set_digital_output(1, OFF) #Second arm cilinder  #off extended
#set_digital_output(2, ON) #robot arm gripper #ON is open to suck 
#set_digital_output(3, OFF) #Towel blower off towel #off is off
#set_digital_output(4, ON) #Second arm gripper #off is closed
#set_digital_output(5, ON) #Venturi  #on is off
#set_digital_output(6, ON) ##Second arm cilinder #NO
#
#
#
#endOTabelCoordsLowered = posx([1002.33, 48.67,49.31,2.26,174.24,42.87])
#LinearAxisCoords = posx([997.01,104.15,50.7,172.28,-170.45,-141.12])
#LinearAxisUp = posx([976.13,100.2,441.48,174.29,-161.52, -142.01])
#Straight2gripperhold = posx([1014.8,-270.17,52.88,102.45,-176.02, 157.11])
##startpos = posx([572.52, -542.23, 219.95, AngleA, AngleB, 180])
#
#endOTabelCoordsLoweredTest1anglecilinderclosertotable = posx([940.77, 36.24,46.79,175.81,-157.52,-142.49])
#LinearAxisCoordsTest1 = posx([943.52,96.78,47.40, 0.71, 156.91, 39.72])
#
#LinearAxisUpTEST = posx([999.13,-34.79,450,38.47,167.50, 89.73])
#Straight2gripperholdTEST = posx([1052.83, -334.49, 56.66, 127.75, -170.23, 83.71])
#endpos = posx([564.97, -328.08, 49.12, 71.92, -176.12, 23.28])
#endpos = posx([524.97, -376.08, 45.12, 59.92, -171.12, 7.06])
#
#
#vel150 = 150
#acc400 = 400
#XfirstCorner = 503.22
#YfirstCorner = -738.16
#AngleA = 92.27
#AngleB = -176.14
#AngleC = -106.86
#ZfirstCorner = 22.94
#startpos = posx([572.52, -542.23, 219.95, AngleA, AngleB, 180])
#movejx(startpos,vel=150,acc=350,sol=2)
#
#
#
#testNiuewe = posx([XfirstCorner,YfirstCorner,70.2,AngleA,AngleB,AngleC])
#movejx(testNiuewe,vel150,acc400,sol=2)
#testNiuewe = posx([XfirstCorner,YfirstCorner,ZfirstCorner,AngleA,AngleB,AngleC])
#movejx(testNiuewe,vel=65,acc=200,sol=2)
#
      #
#set_digital_output(2, ON)
#set_digital_output(5, OFF) #Venturi
#wait(0.1)
###test = posx([892.5,73.9,60.9,18.68,172.6,-77.1]) #sol=3 voor pickup?
#test = posx([XfirstCorner,YfirstCorner,42.2,AngleA,AngleB,AngleC])
#movejx(test,125,acc=300,sol=2) 
#set_digital_output(2, OFF) #robot arm gripper #ON is open to suck 
#set_digital_output(5, ON) #Venturi
#test = posx([XfirstCorner,YfirstCorner,100.2,AngleA,AngleB,AngleC])
#movejx(test,75,acc=300,sol=2) 
#
#endOTabelCoords = posx([1106.4,-63.7,372.60,173.83,-136.27, -41.38])
#movejx(endOTabelCoords,vel = 100,acc = 250,sol=2, radius = 25)
#
##endOTabelCoords = posx([1106.4,-63.7,372.60,171.9,-128.59, -164.42])
##movejx(endOTabelCoords,vel = 150,acc = 400,sol=2, radius = 25)
#
##endOTabelCoords2 = posx([1007.47, -49.13, 272.93, 129.39, -172.82, 154.29])
##movejx(endOTabelCoords2,vel = 150,acc = 400,sol=2, radius = 5)
#wait(0.1)
##y = 91.41
#yChangeable = 5
#endOTabelCoordsLoweredTest2anglecilinderfurthertotable = posx([1078.44,yChangeable, 51.72, 5.32, -151.68, 44.76])
#for x in range(17):
    #yChangeable = yChangeable +5
    #endOTabelCoordsLoweredTest2anglecilinderfurthertotable = [1066.22, yChangeable,55.41,168.70,162.28,-143.50]
    #movejx(endOTabelCoordsLoweredTest2anglecilinderfurthertotable,vel=110,acc=300,sol=2, radius = 25)
#
##LinearAxisCoordsTest2 = posx([1067.51,89.25, 61.24, 169.81, 163.61, -146.54])
##movejx(LinearAxisCoordsTest2,vel=15,acc=50,sol=2)
#wait(0.2)
#set_digital_output(4, OFF) ##Second arm gripper #ON is open
#wait(0.1)
##
#movejx(LinearAxisUpTEST,vel=125,acc=275,sol=2, radius = 10)
#
#
#yChangeable = -192
#Straight2gripperholdTEST2 = posx(1041.54, yChangeable, 52.24, 84.44, -157.21, 26.94)
#for x in range(17):
    #yChangeable = yChangeable - 5
    #Straight2gripperholdTEST2 = posx(1041.54, yChangeable, 52.24, 84.44, -157.21, 26.94)
    #movejx(Straight2gripperholdTEST2,vel=110,acc=300,sol=2, radius = 25)
#
#wait(0.1)
#set_digital_output(6, OFF) ##Second arm cilinder #NO
#wait(0.1)
#set_digital_output(2, ON)  ##robot arm gripper #ON is open to suck 
#wait(0.1)
#
#
#AfterThirdGripper = posx(1001.54, -167.64, 150.24, 165.44, -161.21, 124.94)
#movejx(AfterThirdGripper,vel150,acc400,sol=2, radius = 10)##make it go beside it
            #
#set_digital_output(1, ON) ##Second arm cilinder #NO
##movejx(endpos,vel=150,acc=350, sol=2)
#movejx(startpos,vel=150,acc=400,sol=2, radius = 10)
#
#wait(0.1)
#set_digital_output(4, ON) ##Second arm cilinder #NO
#set_digital_output(6, ON) ##Second arm cilinder #NO
#
#wait(1.0)
#set_digital_output(3, ON)
#wait(1.5)
#set_digital_output(3, OFF)
#
#
#wait(10)
#
            
###########test code voor vloeiende beweging
# maak posb-segmenten (DR_LINE)

# moveb is synchronous: volgende regel pas na start en afronding van het traject
##



#XfirstCorner = 0.0
#YfirstCorner = 0.0
#ZfirstCorner = 30.0
#ZcornerHeight = 25.0
#ZcornerPickupHeigt = 60.0
#AngleA = 0
#AngleB = 180
#AngleC = 0.0
#vel150 = 150
#acc400 = 400
#
###Fixed coordinates #in order of steps
###step 1
#startpos = posx([572.52, -542.23, 219.95, AngleA, AngleB, 180])
###step 8
#endOTabelCoords = posx([1106.4,-63.7,372.60,173.83,-136.27, -41.38])
###step 9
###endOTabelCoordsLoweredTest2anglecilinderfurthertotable = posx([1078.44,5, 51.72, 90.32, -151.68, 44.76])
#endOTabelCoordsLoweredTest2anglecilinderfurthertotable = [1066.22, 5 ,55.41,168.70,162.28,-143.50]
###step 10
#RobotUpThroughCylinder = posx([999.13,-34.79,450,38.47,167.50, 89.73])
#
#LinearAxisUpTEST = posx([999.13,-34.79,450,38.47,167.50, 89.73])
#
###step 11
###Straight2gripperholdTEST2 = posx(1041.54, -277, 52.24, 84.44, -157.21, 26.94)
#Straight2gripperholdTEST2 = [1027.29, -240, 69.46, 58.18, -178.21, 78.94]
##step 12
#AfterThirdGripper = posx(1001.54, -167.64, 150.24, 58.44, -178.21, 78.94)
#
##movejx(AfterThirdGripper,vel150,acc400,sol=2, radius = 25)
#movejx(startpos,vel = 100 ,acc = 300,sol=2, radius = 25)
#set_digital_output(4, OFF, 0.97, ON)
#set_digital_output(6, OFF, 0.94, ON)
#set_digital_output(1, ON) ##Second and third arm cilinder #NO
#wait(10)




from DRCF import *
## --- Variabelen ---
Steps = 0
firstRun = True
##pneumatic cilinder list
set_digital_output(1, OFF) #Second arm cilinder  #off extended
set_digital_output(2, ON) #robot arm gripper #ON is open to suck 
set_digital_output(3, OFF) #Towel blower off towel #off is off
set_digital_output(4, ON) #Second arm gripper #off is closed
set_digital_output(5, ON) #Venturi  #on is off
set_digital_output(6, ON) ##Second arm cilinder #NO

##Variables used in the loop
global variables
TowelVisible = False
FirstCornerVisible = False
GrabbedFirstCorner = False
GrabbedSecondCorner = False
CheckForCorner = False

XfirstCorner = 0.0
YfirstCorner = 0.0
ZfirstCorner = 30.0
ZcornerHeight = 25.0
ZcornerPickupHeigt = 60.0
AngleA = 0
AngleB = 180
AngleC = 0.0
vel150 = 150
acc400 = 400



##Fixed coordinates #in order of steps
##step 1
startpos = posx([572.52, -542.23, 219.95, AngleA, AngleB, 180])
##step 8
#endOTabelCoords = posx([1106.4,-63.7,430.60,AngleA,AngleB, 180])
endOTabelCoords = posx([1106.4,-63.7,430.60,173.83,-136.27, -41.38])

endOTabelCoords = posx([1106.4,-200.7,430.60,173.83,-136.27, -41.38])

##step 9
##endOTabelCoordsLoweredTest2anglecilinderfurthertotable = posx([1078.44,5, 51.72, 90.32, -151.68, 44.76])

endOTabelCoordsLoweredTest2anglecilinderfurthertotable = [1066.22, 5 ,55.41,168.70,162.28,-143.50]
Cylinder2coords = [1084.7, 11.07, 54.35, 8.34, -164.36, 51.22]

##step 10
RobotUpThroughCylinder = posx([999.13,-34.79,460,38.47,167.50, 89.73])

LinearAxisUpTEST = posx([999.13,-34.79,450,38.47,167.50, 89.73])

##step 11
##Straight2gripperholdTEST2 = posx(1041.54, -277, 52.24, 84.44, -157.21, 26.94)
Straight2gripperholdTEST2 = [1027.29, -240, 69.46, 58.18, -178.21, 78.94]
#step 12
#AfterThirdGripper = posx(1001.54, -167.64, 150.24, 58.44, -178.21, 78.94)
AfterThirdGripper = posx(1027.54, -220.64, 120.24, 58.44, -178.21, 78.94)




#endOTabelCoordsLowered = posx([1002.33, 48.67,49.31,2.26,174.24,42.87])
#LinearAxisCoords = posx([997.01,104.15,50.7,172.28,-170.45,-141.12])
#LinearAxisUp = posx([976.13,100.2,441.48,174.29,-161.52, -142.01])
#Straight2gripperhold = posx([1014.8,-270.17,52.88,102.45,-176.02, 157.11])
#
#endOTabelCoordsLoweredTest1anglecilinderclosertotable = posx([940.77, 36.24,46.79,175.81,-157.52,-142.49])
#LinearAxisCoordsTest1 = posx([943.52,96.78,47.40, 0.71, 156.91, 39.72])
#
#LinearAxisUpTEST = posx([999.13,-34.79,450,38.47,167.50, 89.73])
#Straight2gripperholdTEST = posx([1052.83, -334.49, 56.66, 127.75, -170.23, 83.71])
#endpos = posx([564.97, -328.08, 49.12, 71.92, -176.12, 23.28])
#endpos = posx([524.97, -376.08, 45.12, 59.92, -171.12, 7.06])
#
###test coordinates of fixed corner placement
#testAboveCorner = posx([503.22,-738.16,70.2,92.27,-176.14,-106.86])
#testOnCorner = posx([503.22,-738.16,22.94,92.27,-176.14,-106.86])
#testRaisedSuckedCOrner = posx([503.22,-738.16,42.2,92.27,-176.14,-106.86])
#testAfterClamped = posx([503.22,-738.16,100,92.27,-176.14,-106.86])



sock = None

## --- Socket receive and processing data ---
def ReadSocketData(msg):
    global TowelVisible, FirstCornerVisible, SecondCornerVisible
    global XfirstCorner, YfirstCorner, XsecondCorner, YsecondCorne, ZfirstCorner
    global XtableCorner, YtableCorner, XcoordsArmLinearAxis, YcoordsArmLinearAxis
    global XcoordsEndOfTable, YcoordsEndOfTable
    global AngleA, AngleB, AngleC

   
    if msg != None and msg != "":
        parts = msg.split(";")
        for pair in parts:
            if pair != "":
                kv = pair.split("=")
                if len(kv) == 2:
                    key = kv[0]
                    value = kv[1]
                    if key == "TowelVisible":
                        TowelVisible = (value == "1")
                    elif key == "FirstCornerVisible":
                        FirstCornerVisible = (value == "1")
                    elif key == "XfirstCorner":
                        XfirstCorner = float(value)
                    elif key == "YfirstCorner":
                        YfirstCorner = float(value)
                    elif key == "Z":
                        ZfirstCorner = float(value)
                    elif key == "C":
                        AngleC = float(value)

def Main():
    global Steps, ConveyorBelt, TowelVisible, FirstCornerVisible, SecondCornerVisible, firstRun
    global GrabbedFirstCorner, GrabbedSecondCorner, TakeLatestPicture, CheckForCorner
    global XfirstCorner, YfirstCorner, XsecondCorner, YsecondCorner
    global XtableCorner, YtableCorner, XcoordsArmLinearAxis, YcoordsArmLinearAxis, ZfirstCorner
    global XcoordsEndOfTable, YcoordsEndOfTable
    global T1_start, T1_running, T2_start, T2_running
    global AngleA, AngleB, AngleC
    

    while True:
        ## Step 0 nothing move on to step 1
        if Steps == 0:
            set_digital_output(3, OFF) #Towel blower off towel #off is off
            set_digital_output(1, OFF) #Second arm cilinder  #off extended
            sock = client_socket_open('192.168.137.10', 5000)
            msgToLaptop = "CheckForCorner=1"
            client_socket_write(sock,  msgToLaptop.encode())
            Steps = 1
        ##Step 1 init and move back to start position
        elif Steps == 1:
            TowelVisible = False
            FirstCornerVisible = False
            GrabbedFirstCorner = False
            GrabbedSecondCorner = False
            TakeLatestPicture = False
            CheckForCorner = False

            XfirstCorner = 0.0; YfirstCorner = 0.0
            ZfirstCorner = 24.0
            AngleFirstCorner = 0.0
            set_digital_output(2, ON) #robot arm gripper #ON is open to suck 
            set_digital_output(4, ON) #Second arm gripper #off is closed
            set_digital_output(5, ON) #Venturi  #on is off
            set_digital_output(6, ON) ##Second arm cilinder #NO
            

            movejx(startpos,vel150,acc400,sol=2)
            Steps = 2
            
        ##step 2 give signal for detection to laptop
        elif Steps == 2: ## If corner is found go to pickup step else go to blow towel away step
            if firstRun:
                firstRun = False
            else:
                set_digital_output(3, ON, 2, OFF) #towel blower away
                set_digital_output(1, ON, 2.2, OFF) #Second arm cilinder  #off extended
            CheckForCorner = True
            resp, recv = client_socket_read(sock)
            client_socket_close(sock)
            msg = recv.decode()
            ReadSocketData(msg) ##read the respons from the laptop 
            #wait(0.1)
            if TowelVisible:
                Steps = 3
                
        ##step 3 check if firstcorner is visible 
        elif Steps == 3: 
            if FirstCornerVisible:
                Steps = 4
                
            else: 
                Steps = 104
                
        ##step 4 move to slightly higher than the corner coords
        elif Steps == 4: 
            PickupCoordsAbove = posx([XfirstCorner,YfirstCorner,55.2,AngleA,AngleB,AngleC])
            movejx(PickupCoordsAbove,vel150,acc400,sol=2)
            Steps = 5
            
        ##step 5 go to the corner and same height
        elif Steps == 5: ##Move to edge of table
            PickupCoords = posx([XfirstCorner,YfirstCorner,ZfirstCorner,AngleA,AngleB,AngleC])
            movejx(PickupCoords,vel=100,acc=250,sol=2)
            Steps = 6

        ##step 6 start sucking on towel and slightly raise it
        elif Steps == 6:
            set_digital_output(2, ON)
            set_digital_output(5, OFF) #Venturi
            wait(0.1)
            PickupCoordsSuckedAndRaised = posx([XfirstCorner,YfirstCorner,42.2,AngleA,AngleB,AngleC])
            movejx(PickupCoordsSuckedAndRaised,vel=75,acc=300,sol=2) 
            Steps = 7
          
        ##step 7 clamp the towel and move up 
        elif Steps == 7:
            set_digital_output(2, OFF) #robot arm gripper #ON is open to suck 
            set_digital_output(5, ON) #Venturi
             ##set the blower on 
       
            PickupCoordsClampedAndHigh = posx([XfirstCorner,YfirstCorner,100.2,AngleA,AngleB,AngleC])
            #movejx(PickupCoordsClampedAndHigh,vel=140,acc=350,sol=2) 
            set_digital_output(4, ON) ##Second arm cilinder #NO
            set_digital_output(6, ON) ##Second arm cilinder #NO

            Steps = 8
            
        ##Step 8 move to the edge of the table
        elif Steps == 8:
            movejx(endOTabelCoords,vel = 75,acc = 175,sol=2, radius = 25)
            ##set the blower off 
            wait(0.1)
            Steps = 9

        ##Step 9 move to the 2nd cilinder and clamp it
        ##########3cahnge
        elif Steps == 9:
            Cylinder2coords = [1084.7, 11.07, 54.35, 8.34, -164.36, 51.22]
            endOTabelCoordsLoweredTest2anglecilinderfurthertotable = [1066.22, 0 ,55.41,168.70,162.28,-143.50]
            for _ in range(18):
                Cylinder2coords[1] += 5     # alleen Y aanpassen
                movejx(posx(Cylinder2coords), vel=150, acc=350, sol=2, radius=1.5)
            wait(0.1)
            set_digital_output(4, OFF) ##Second arm gripper #ON is open
            wait(0.1)
            Steps = 10

        ##step 10 move through the 2nd gripper up 
        elif Steps == 10: 
            movejx(RobotUpThroughCylinder,vel=50,acc=95,sol = 2)
            wait(0.1)
            Steps = 11
        
        ##step 11 feed the 3rd cylinder and gripper
        ##########3cahnge
        elif Steps == 11:
            Straight2gripperholdTEST2 = [1068.51, -239, 55.46, 179.18, 166.21, -141.94]
            for _ in range(17):
                Straight2gripperholdTEST2[1] -= 5     # alleen Y aanpassen
                movejx(posx(Straight2gripperholdTEST2), vel=150, acc=380, sol=2, radius=1.5)
            #yChangeable = -192    
            #Straight2gripperholdTEST2 = posx(1041.54, yChangeable, 52.24, 84.44, -157.21, 26.94)
            #for x in range(17):
                #yChangeable = yChangeable - 5
                #Straight2gripperholdTEST2 = posx(1041.54, yChangeable, 52.24, 84.44, -157.21, 26.94)
                #movejx(Straight2gripperholdTEST2,vel=100,acc=250,sol=2)
            set_digital_output(6, OFF) ##Second arm cilinder #NO
            wait(0.1)
            set_digital_output(2, ON)  ##robot arm gripper #ON is open to suck 
            wait(0.1)
            Steps = 12
            
        ##step 12 move slightly away from the 3rd gripper
        elif Steps == 12:
            movejx(AfterThirdGripper,vel150,acc400,sol=2, radius = 25)
            Steps = 13

        ##step 13 move both cylinders back to lay towel flat
        elif Steps == 13:
            set_digital_output(4, OFF, 0.97, ON) ##Second arm cilinder #NO
            set_digital_output(6, OFF, 0.94, ON) ##Second arm cilinder #NO
            set_digital_output(1, ON) ##Second and third arm cilinder #NO
            Steps = 14
            
        ##step 14 move both cylinders back to lay towel flat
        elif Steps == 14:
            sock = client_socket_open('192.168.137.10', 5000)
            msgToLaptop = "CheckForCorner=1"
            client_socket_write(sock,  msgToLaptop.encode())
            movejx(startpos,vel = 140 ,acc = 370,sol=2, radius = 25)
            Steps = 15
            
        ##step 15 let go of both cylinder grippers
        elif Steps == 15:
         
            
            Steps = 1        
       
        ##step 104 if no corner then blow towel away
        elif Steps == 104: 
             set_digital_output(3, ON)  ##robot arm gripper #ON is open to suck
             wait(2)
             set_digital_output(3, OFF)  ##robot arm gripper #ON is open to suck
             Steps = 105
        
        ##step 105 go back to the start
        elif Steps == 105:
            Steps = 0
         
        ##default step if it has wrong value go back to start
        else:
            Steps = 0

Main()
